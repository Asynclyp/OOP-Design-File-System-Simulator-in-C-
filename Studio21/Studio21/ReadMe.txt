Studio 21 ReadMe.txt
1.	Kai Ang
	Kevin Oloomi
	Spark Li
2.	We need a virtual destructor so that at runtime, while the client-facing object will be an AbstractCommand object, when we need to deconstruct it, the appropriate concrete class deconstructor will be called.
3.	The command prompt only acts on these classes through their abstract interfaces, so as long as the concrete classes implement these interfaces, they can be used interchangabily, making the code highly flexible. We can easily change any one part without breaking the system.
4.	We tested the command inputs "touch foo.txt", "touch foo moo.txt", "touch foo" "help", "help touch", "help bob", and "bob" followed by quitting. When we quit, we expect to get a return value of 13, which we do. We then try to open "foo.txt" and "foo moo.txt". Then the user quits. For "touch foo.txt", the we expect to find "foo.txt" but not find "foo moo.txt", and have a return value from run() of 16. For "touch foo moo.txt" we exepct to find "foo moo.txt" but not "foo.txt" and have a return value of 16. For "touch foo", we expect to be notified of an execution error, not be able to find either of the files, and got a return value of 12. For "help", we expect to have "touch" printed out, not find either of the files, and get a return value of 14. For "help touch", we expect to get the info message for touch, not find either of the files, and get a return value of 15. For "help bob", we expect to be notified that the command was not found, none of the files are found, and get a return value of 11. We expect the same output for "bob" as we got for "help bob". All tests resulted in the expected values.